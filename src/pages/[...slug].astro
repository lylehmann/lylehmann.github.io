---
import { type CollectionEntry, getCollection } from 'astro:content';
import Prose from '../components/Prose.astro';
import BaseLayout from '@src/layouts/BaseLayout.astro';
import { Image } from 'astro:assets';
import FormattedDate from '../components/FormattedDate.astro';
import TableOfContent from '../components/widgets/TableOfContent.astro';
import { slugify } from '../utils';
import { loadEnv } from 'vite';
import CoverImage from '@src/layouts/components/CoverImage.astro';

const { GISCUS_REPO, GISCUS_REPO_ID, GISCUS_CATEGORY, GISCUS_CATEGORY_ID } = loadEnv(
	process.env.NODE_ENV || 'production',
	process.cwd(),
	''
);

export async function getStaticPaths() {
	const posts = await getCollection('blog');
	return posts.map((post: any) => ({
		params: { slug: post.slug }
	}));
}

export async function get({ params }: { params: { slug: string } }) {
	const { slug } = params;
	const posts = await getCollection('blog');
	const post = posts.find((p: { slug: string }) => p.slug === slug);

	if (!post) {
		return {
			status: 404,
			body: 'Post not found'
		};
	}

	return {
		props: {
			post
		}
	};
}

type Props = CollectionEntry<'blog'> & {
	data: {
		title: string;
		seoTitle?: string;
		description: string;
		coverImage?: { src: string };
		pubDate: Date;
		updatedDate?: Date;
		tags?: string[];
	};
};

const post = Astro.props;
const {
	data: { title, seoTitle, description, coverImage, pubDate, updatedDate, tags }
} = post;

const { Content, headings } = await post.render();
const coverImageSrc = coverImage?.src || undefined;
---

<BaseLayout title={seoTitle || title} description={description} image={coverImageSrc}>
	<div class='container lg:flex gap-10'>
		<main class='overflow-hidden grow'>
			<article>
				<Prose>
					<div>
						<h1 class='!my-1 leading-tight'>{title}</h1>
						<CoverImage src={coverImageSrc} alt={title || ''} className='my-4 rounded-lg' />
					</div>
					<div
						class='text-sm font-[500] mt-2 sm:mt-0 py-1 md:text-right flex flex-col sm:flex-row gap-3 sm:justify-between sm:items-center'
					>
						<div class='flex gap-2'>
							{
								(tags || []).map((tag: string) => (
									<a
										class='border border-zinc-300 dark:border-zinc-700 rounded-2xl text-xs text-zinc-700 dark:text-zinc-300 no-underline px-2 py-0.5 transition-all duration-700 hover:border-zinc-700 dark:hover:border-zinc-300'
										href={`/tags/${slugify(tag)}`}
									>
										{tag}
									</a>
								))
							}
						</div>
					</div>
					<Content />
				</Prose>
			</article>
		</main>
		<div class='shrink-0 w-[280px] hidden md:block'>
			<TableOfContent headings={headings} />
		</div>
	</div>
</BaseLayout>
